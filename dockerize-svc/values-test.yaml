# Default values for <CHARTNAME>.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # registry: test
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent
  pullSecrets: []
  # pre-declared Secret , array of Secret name

nameOverride: ""
fullnameOverride: ""

services: {}
  #   type: <ClusterIP|NodePort>
  #   ports:
  #     - name
  #       nodePort: <port_on_node> # only used when type is NodePort and LoadBalancer
  #       port: <exposed_port_number>
  #       targetPort: <number_or_name> 
  #       protocol: <TCP|UDP>

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

dockerize:
  timeout: 60s
# dockerize default timeout

configs: []
  # array of Configs
  # - name : <config_map_name>
  #   mountPath: <path_in_container>
  #   items:
  #   - key: <key_in_config_map>
  #     path: <The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.>
  #   
  #     
  #


args: []
# command for container, string array

dependencies: {}
# Probe v1 core,  only support tcpSocket and httpGet
# reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#probe-v1-core
  # <dep_name>:
  #   tcp:
  #     host: <host>
  #     port: <port>
  #   http:
  #     host: <host>
  #     port: <port>
  #     path: <http path>
  #   service:
  #     target:
  

livenessProbe: {}
# reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#probe-v1-core
  # - tcpSocket:
  #     host: <host>
  #     port: <port>
  #   initialDelaySeconds: 60s
  #   periodSeconds: 10s
  #   timeoutSeconds: 60s
  #   failureThreshold: 3
  # - exec:
  #     command: ["some","command"]

readinessProbe: {}
# same as livenessProbe

nodeSelector: {}
# Pod Spec
# reference: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/

tolerations: []
# Pod Spec, array of teleration
# reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#toleration-v1-core

affinity: {}
# pod spec affinity
# reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#affinity-v1-core


extra: {}
# extra container fields
# reference: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.11/#container-v1-core
  # env: <env>
  # envFrom:

init:
  - image:
      registry: *registry
      repository: jwilder/dockerize
      tag: latest
    command: ["/bin/sh","-c","some args"]
  
image:
  registry: &registry d.artifactory.segmetics.com
  repository: roc-server-application
  tag: v0.3.1-RC2
  pullSecrets: 
    - *registry
configs:
  - name: roc-sa-config
    mountPath: /config
    items:
      - key: roc-config.conf
        path: app.conf
  - name: sample-config
    mountPath: /sample
    items:
      - key: some.conf
        path: target.conf
configs:
  - name: some-config2
    mountPath: /sample2
    items:
      - key: some2.conf
        path: target2.conf
services:
  external:
    type: LoadBalancer
    ports:
      mockingbird:
        port: 34566
        protocol: TCP
  internal:
    type: ClusterIP
    ports:
      restapi:
        port: 3555
        targetPort: 35555
      
args: ["/app","${POD_NAME}-roc-sa","/config/app.conf"]

env:
  - name: POD_IP2
    valueFrom:
      fieldRef:
        fieldPath: status.podIP

dependencies:
  rabbitmq:
    tcp:
      host: rabbitmq-host
      port: rabbitmq-port
  redis:
    http:
      host: redis-host
      port: redis-port
      uri: /healthz


volumeMounts:
  - name: SOME_VOLUME
    mountPath: /mount/path

volumes:
  - name: SOME_VOLUME
    emptyDir: {}
  - name: SOME_PVC
    persistentVolumeClaim:
      claimName: PVC_NAME
      readOnly: true